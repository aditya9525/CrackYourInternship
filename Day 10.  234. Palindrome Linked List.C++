/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
    ListNode* midElement(ListNode* head){
        if(head->next==NULL){
            return head;
        }

        ListNode* slow=head;
        ListNode* fast=head->next;
        while(fast!=NULL && fast->next!=NULL){
            slow=slow->next;
            fast=fast->next->next;
        }
        return slow;
    }

    ListNode* reverse(ListNode* head){
        if (head->next == NULL){
            return head;
        }
        ListNode* curr=head;
        ListNode* prev=NULL;
        while (curr!=NULL){
            ListNode* forw=curr->next;
            curr->next=prev;
            prev=curr;
            curr=forw;
        }
        return prev;
    }
public:
    bool isPalindrome(ListNode* head) {
        if(head->next == NULL){
            return 1;
        }

        ListNode* mid=midElement(head);
        ListNode* temp=mid->next;
        mid->next=reverse(temp);

        ListNode* h1=head;
        ListNode* h2=mid->next;
        while(h2!=NULL){
            if(h1->val != h2->val){
                return 0;
            }

            h1=h1->next;
            h2=h2->next;
        }
        temp=mid->next;
        mid->next=reverse(temp);
        return temp;
    }
};
